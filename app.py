from flask import Flask, render_template, request
import pickle
# import matplotlib.pyplot as plt
# import io
# import base64
import pandas as pd
import dill
import re
import lime
import random
from lime import lime_text
from lime.lime_text import LimeTextExplainer
import warnings
warnings.filterwarnings("ignore")

app = Flask(__name__)



'''

            A function that loads in the trained RandomForestClassifier (currently v2) and predicts the user's loan approval probability

                Input:
                    - 2D array (1,23)

                Outputs:
                    - RandomForestClassifier model (object)
                    - model prediction (list) 

'''

def predict(sample_shaped):
    file = open('model_v2.pkl', 'rb')
    model = pickle.load(file)
    file.close()
    prediction = model.predict(sample_shaped)

    return prediction, model



'''

            A function that runs LIME on the RandomForestClassifier model and explains its prediction

                Inputs:
                    - pandas Series (23, 2)
                    - RandomForestClassifier model (object)

                Output:
                    - explanation of a prediction instance (object)

'''
def run_lime(sample, model):
    file = open('lime_model', 'rb')
    explainer = dill.load(file)
    file.close()
    explanation = explainer.explain_instance(sample, model.predict_proba)

    return explanation



'''

            A function that maps LIME explanations to features and returns the top 10 contributing features to the model prediction

                Input:
                    - explanation of a prediction instance (object)

                Output:
                    - mapped LIME output (list)
'''
def get_top10(explanation):

    raw_data = explanation.as_list()

    feature_name_to_index = {
        'ExternalRiskEstimate': 0,
        'MSinceOldestTradeOpen': 1,
        'MSinceMostRecentTradeOpen': 2,
        'AverageMInFile': 3,
        'NumSatisfactoryTrades': 4,
        'NumTrades60Ever2DerogPubRec': 5,
        'NumTrades90Ever2DerogPubRec': 6,
        'PercentTradesNeverDelq': 7,
        'MSinceMostRecentDelq': 8,
        'MaxDelq2PublicRecLast12M': 9,
        'MaxDelqEver': 10,
        'NumTotalTrades': 11,
        'NumTradesOpeninLast12M': 12,
        'PercentInstallTrades': 13,
        'MSinceMostRecentInqexcl7days': 14,
        'NumInqLast6M': 15,
        'NumInqLast6Mexcl7days': 16,
        'NetFractionRevolvingBurden': 17,
        'NetFractionInstallBurden': 18,
        'NumRevolvingTradesWBalance': 19,
        'NumInstallTradesWBalance': 20,
        'NumBank2NatlTradesWHighUtilization': 21,
        'PercentTradesWBalance': 22
                            }
    
    lime_output_mapped = []

    for lime_rule in raw_data:
        feature_name = None
        coefficient = lime_rule[1]

        # Use regex to extract the feature index (a single digit)
        match = re.search(r'(^\d\d?| 0[1-9]?|[1-9]\d?) ', lime_rule[0])
        if match:
            feature_index = int(match.group())  # Extract the matched digit
            # Look up the feature name using the index
            for name, index in feature_name_to_index.items():
                if index == feature_index:
                    feature_name = name
                    break
        
        if feature_name:
            lime_output_mapped.append((feature_name, coefficient))
    
    return lime_output_mapped



# ''' 

#             A function that generates a bar plot based on the top 10 contributing features to the model prediction generated by LIME

#                 Input:
#                     - mapped LIME output (list)

# '''
# def create_bar_plot(lime_output_mapped):

#     feature_names, values = zip(*lime_output_mapped)

#     # Create figure and axis
#     fig, ax = plt.subplots(figsize=(6.5, 6))

#     # Create horizontal bars for positive and negative values
#     ax.barh(feature_names, [max(0, val) for val in values], color='#B3D3E8', label='Positive', alpha=0.7)
#     ax.barh(feature_names, [min(0, val) for val in values], color='#769FCD', label='Negative', alpha=0.7)

#     # Add labels and legend
#     ax.set_xlabel('Feature Contribution')
#     ax.set_title('LIME Feature Contributions')
#     ax.legend()

#     ax.xaxis.grid(True, linestyle='--', alpha=0.5)

#     # Invert the y-axis to display the most important features at the top
#     ax.invert_yaxis()

#     # Show the plot
#     plt.tight_layout()



# ''' 

#             A function that generates a pie chart based on prediction probabilities for each categories generated by LIME

#                 Input:
#                     - explanation of a prediction instance (object)

# '''
# # Generate pie chart for LIME output
# def create_pie_chart(explanation):
#     labels = ['Rejected (Negative)', 'Approved (Positive)']

#     # Colors for the pie chart
#     colors = ['#769FCD', '#B3D3E8']

#     # Explode a slice to emphasize it
#     explode = (0.1, 0)

#     plt.figure(figsize=(6.5, 5))

#     # Create a pie chart
#     plt.pie(explanation.predict_proba, labels=labels, colors=colors, explode=explode, autopct='%1.1f%%', textprops={'fontsize': 8}, startangle=140)

#     # Equal aspect ratio ensures that pie is drawn as a circle
#     plt.axis('equal')

#     # Title
#     plt.title('HELOC Approval Probabilities')




# '''

#             A function that converts generated plots to a png file to allow plots to be rendered in HTML

#                 Input:
#                     - intended plot type (string)
#                     - explanation of a prediction instance (object)

#                 Output:
#                     - link to locally saved plot image (string)

# '''

# # Convert generated plot to img
# def plot_to_img(type, explanation):

#     if type == 'bar':
#         lime_output_mapped = get_top10(explanation)
#         create_bar_plot(lime_output_mapped)

#         img = io.BytesIO()
#         plt.savefig(img, format='png')
#         plt.close()
#         img.seek(0)

#         img_b64 = base64.b64encode(img.getvalue()).decode('utf8')

#         return img_b64
    
#     elif type == 'pie':
#         create_pie_chart(explanation)

#         img = io.BytesIO()
#         # This is for donut
#         # circle = plt.Circle(xy=(0,0), radius=.75, facecolor='white')
#         # plt.gca().add_artist(circle)

#         plt.savefig(img, format='png')
#         plt.close()
#         img.seek(0)
        
#         img_b64 = base64.b64encode(img.getvalue()).decode('utf8')

#         return img_b64


def getDescription(prediction, explanation, test_instance):

    if (prediction[0] >= prediction[1]):
        verdict = f'negative with a certainty of {str(round(prediction[0] * 100, 2))}%'
        implication = 'unlikely'
    elif (prediction[0] < prediction[1]):
        verdict = f'positive with a certainty of {str(round(prediction[1] * 100, 2))}%'
        implication = 'likely'


    head = f"Based on the provided information, the model's predicted outlook was <b>{verdict}</b>.\
             This prediction means that it was <b>{implication}</b> that the applicant is able to \
             complete the loan period without being over 90 days overdue on a repayment.<br>"
    

    pos = "These were the <b>positively</b> contributing features which were beneficial during\
           the consideration process:<br>"

    neg = "These were the <b>negatively</b> contributing features which can be improved to potentially\
           yield a more positive prediction:<br>"
    

    Fpos = '<ul style="font-size: 12px; text-align: left;">'
    Fneg = '<ul style="font-size: 12px; text-align: left;">'
    for feature in explanation:
        if feature[1] > 0:
            Fpos = Fpos + f'<li>{featureDescription(feature[0], test_instance[feature[0]], 1)}</li>'
        else:
            Fneg = Fneg + f'<li>{featureDescription(feature[0], test_instance[feature[0]], 0)}</li>'

    a = f'{head}'
    b = f'{pos}{Fpos}'
    c = f'{neg}{Fneg}'

    b = b + "</ul>"
    c = c + "</ul>"
    return a, b, c


def featureDescription(feature, value, flag):

    if feature == 'ExternalRiskEstimate':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f'The high value of {feature}: {value} had a positive influence on the risk assessment.'
        else:
            feature_desc = f'The low value of {feature}: {value}, where a greater value would be more beneficial.'
    
    elif feature == 'MSinceOldestTradeOpen':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f'The long history of {feature}: {value} months, demonstrated a reliable history of trading.'
        else:
            feature_desc = f'The short history of {feature}: {value} months, which being longer would demonstrate more reliability.'
    
    elif feature == 'MSinceMostRecentTradeOpen':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f"Recent activity in {feature}: {value} months ago, displaying assurance about the applicant."
        else:
            feature_desc = f'Lack of recent trades in {feature}: {value} months ago, where more activity is desired.'
    
    elif feature == 'AverageMInFile':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f'The applicant has a high average of {value} months for {feature}.'
        else:
            feature_desc = f'The applicant has a low average of {value} months for {feature}, if higher it would provide a more reliable history.'
    
    elif feature == 'NumSatisfactoryTrades':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f'Numerous satisfactory trades in {feature}: {value}.'
        else:
            feature_desc = f'Insufficient satisfactory trades in {feature}: {value}, which would benefit from more instances on record.'
    
    elif feature == 'NumTrades60Ever2DerogPubRec':
        # monotonically increasing
        if flag == 1:
            feature_desc = f'Few instances of trades with 60+ delinquencies or public records in {feature}: {value}.'
        else:
            feature_desc = f'More trades with 60+ delinquencies or public records in {feature}: {value} may indicate credit risk, therefore should be minimised.'
    
    elif feature == 'NumTrades90Ever2DerogPubRec':
        # monotonically increasing
        if flag == 1:
            feature_desc = f'Few instances of trades with 90+ delinquencies or public records in {feature}: {value}.'
        else:
            feature_desc = f'More trades with 90+ delinquencies or public records in {feature}: {value} may indicate credit risk, therefore should be minimised.'
    
    elif feature == 'PercentTradesNeverDelq':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f"High percentage of trades with no delinquencies in {feature}: {value}%, displays the applicant's capability to avoid delinquency."
        else:
            feature_desc = f'Low percentage of trades with no delinquencies in {feature}: {value}%, which would benefit from having more trades that avoid complications.'
    
    elif feature == 'MSinceMostRecentDelq':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f'A long period of time since the last deliquency of {value} months in {feature}, demonstrating reliability to make repayments without issue.'
        else:
            feature_desc = f'A short period of time since the last deliquency of {value} months in {feature}, which ideally would be avoided and aimed to be increased.'
    
    elif feature == 'MaxDelq2PublicRecLast12M':
        # monotonically decreasing for 0-7
        # complete
        if value == 0:
            feature_desc = f'The delinquency level in the last 12 months for {feature} indicates a serious issue with the applicant.'
        elif value == 1:
            feature_desc = f'The deliquency level in the last 12 months {feature} was 120+ days on their repayments, indicating significant financial distress.'
        elif value == 2:
            feature_desc = f'The deliquency level in the last 12 months {feature} was 90 days delinquent on their repayments, failing the same risk criteria for this loan.'
        elif value == 3:
            feature_desc = f'The deliquency level in the last 12 months {feature} was 60 days delinquent on their repayments, a concerning sign but not as severe.'
        elif value == 4:
            feature_desc = f'The deliquency level in the last 12 months {feature} was 30 days delinquent on their repayments, a small indicator of potential risk but still reasonable.'
        elif value == 5 or {value} == 6: 
            feature_desc = f'The deliquency level in the last 12 months {feature} was unknown.'
        elif value == 7:
            feature_desc = f'The deliquency level in the last 12 months {feature} does not exist for the applicant.'
        else:
            # catch all for 8, 9 if they somehow exist despite being removed from the test set
            feature_desc = f'The delinquency level in the last 12 months for {feature} cannot be identified.'

    elif feature == 'MaxDelqEver':
    # Monotonically decreasing for 2-8
        if value == 2:
            feature_desc = f'The maximum delinquency ever for {feature} indicates a derogatory comment, suggesting a very severe level of delinquency.'
        elif value == 3:
            feature_desc = f'The maximum delinquency ever for {feature} was 120+ days delinquent at some point, indicating significant financial distress.'
        elif value == 4:
            feature_desc = f'The maximum delinquency ever for {feature} was 90 days delinquent at some point, failing the same risk criteria for this loan.'
        elif value == 5:
            feature_desc = f'The maximum delinquency ever for {feature} was 60 days delinquent at some point, a concerning sign but not as severe.'
        elif value == 6:
            feature_desc = f'The maximum delinquency ever for {feature} was 30 days delinquent at some point, a small indicator of potential risk but still reasonable.'
        elif value == 7:
            feature_desc = f'The maximum delinquency ever for {feature} has an unknown delinquency history.'
        elif value == 8:
            feature_desc = f'The maximum delinquency ever for {feature} indicates the applicant is currently not delinquent and has never been delinquent in the past.'
        else:
            # Catch all for values other than 2-8
            feature_desc = f'The maximum delinquency ever for {feature} cannot be identified.'


    elif feature == 'NumTotalTrades':
        # no constraint
        if flag == 1:
            feature_desc = f'The total number of trades made by the applicant of {value} in {feature}, having a positive influence.'
        else:
            feature_desc = f'The total number of trades made by the applicant of {value} in {feature}, having a negative influence.'

    elif feature == 'NumTradesOpeninLast12M':
        # monotonically increasing
        if flag == 1:
            feature_desc = f'The applicant opened many trades in the last 12 months in {feature}: {value}, where recent activity had a positive effect on the prediction.'
        else:
            feature_desc = f'The applicant opened few trades in the last 12 months in {feature}: {value}, where more recent activity would improve the prediction.'
    
    elif feature == 'PercentInstallTrades':
        # no constaint
        if flag == 1:
            feature_desc = f'The percentage of installment trades in {feature}: {value}, having a positive influence on the predicted class.'
        else:
            feature_desc = f'The percentage of installment trades in {feature}: {value}, which was negatively influcencing the predicted class.'
    
    elif feature == 'MSinceMostRecentInqexcl7days':
        # monotonically decreasing
        if flag == 1:
            feature_desc = f'No recent inquiries (excluding last 7 days) in {feature}: {value} months ago, a good indicator that the applicant has not caused concern in recent months.'
        else:
            feature_desc = f'Recent inquiries (excluding last 7 days) have been performed in {feature}: {value} month ago, which may lead to doubt about the applicant.'
    
    elif feature == 'NumInqLast6M':
        # monotonically increasing
        if flag == 1:
            feature_desc = f'Few inquiries in the last 6 months in {feature}: {value}, a positive indicator for the risk assessment.'
        else:
            feature_desc = f'Too many inquiries in the last 6 months in {feature}: {value}, which may indicate problematic activity and negatively impact the risk assessment.'
    
    elif feature == 'NumInqLast6Mexcl7days':
        # monotonically increasing
        if flag == 1:
            feature_desc = f'Few inquiries in the last 6 months (excluding last 7 days) in {feature}: {value}, a positive indicator for the risk assessment.'
        else:
            feature_desc = f'Numerous inquiries in the last 6 months (excluding last 7 days) in {feature}: {value}, which may indicate problematic activity and negatively impact the risk assessment.'
    
    elif feature == 'NetFractionRevolvingBurden':
        # monotonically increasing 
        if flag == 1:
            feature_desc = f'Good ratio of revolving burden in {feature}: {value}, a positive influence on the prediction.'
        else:
            feature_desc = f'Poor ratio of revolving burden in {feature}: {value}, which may benefit from being greater in order to have a more positive outcome.'
    
    elif feature == 'NetFractionInstallBurden':
        # monotonically increasing
        if flag == 1:
            feature_desc = f'Good installment burden ratio in {feature}: {value}, an indicator that the applicant can maintain a fair ratio of installment balances.'
        else:
            feature_desc = f'Poor installment burden ratio in {feature}: {value}, where a more reasonable ratio would be beneficial to demonstrate the ability to maintain good installment balances.'
    
    elif feature == 'NumRevolvingTradesWBalance':
        # no constraint
        if flag == 1:
            feature_desc = f'Number of revolving trades with a balance in {feature}: {value}, positively impacting the predicted risk assessment.'
        else:
            feature_desc = f'Number of revolving trades with a balance in {feature}: {value}, negatively impacting the predicted risk assessment as it may indicate poor trustworthiness.'
    
    elif feature == 'NumInstallTradesWBalance':
        # no constraint
        if flag == 1:
            feature_desc = f'Number of installment trades with a balance in {feature}: {value}, a good sign of trustworthiness in the applicant.'
        else:
            feature_desc = f'Number of installment trades with a balance in {feature}: {value}, a poor sign of reliability that may reduce trust in the applicant.'
    
    elif feature == 'NumBank2NatlTradesWHighUtilization':
        # monotonically increasing
        if flag == 1:
            feature_desc = f'Low rate of high utilization of bank/national trades in {feature}: {value}, which is beneficial towards a positive predicted class.'
        else:
            feature_desc = f'High rate of high utilization of bank/national trades in {feature}: {value}, which is detrimental towards a positive predicted class and should not be too high.'
    
    elif feature == 'PercentTradesWBalance':
        # no constraint
        if flag == 1:
            feature_desc = f'The percentage of trades with a balance in {feature}: {value}, which contributed towards a positive risk assessment.'
        else:
            feature_desc = f'The percentage of trades with a balance in {feature}: {value}, which contributed towards a negative risk assessment.'
    
    else:
        feature_desc = f'No description available for {feature}'
    
    return feature_desc

    
'''
                            This is a sample data for initial page loading
'''
sampling_data = pd.read_csv('H_test.csv')

# Generate a random index
random_index = random.randint(0, len(sampling_data) - 1)
# Select the random test instance from H_val_X
random_test_instance = sampling_data.iloc[random_index]

sample_data = random_test_instance.to_dict()

# Placeholder values for index route (not utilised)
'''sample_data = {'ExternalRiskEstimate':87, 
                   'MSinceOldestTradeOpen':155, 
                   'MSinceMostRecentTradeOpen':4, 
                   'AverageMInFile':70, 
                   'NumSatisfactoryTrades':35, 
                   'NumTrades60Ever2DerogPubRec':0, 
                   'NumTrades90Ever2DerogPubRec':0, 
                   'PercentTradesNeverDelq':100, 
                   'MSinceMostRecentDelq':-7, 
                   'MaxDelq2PublicRecLast12M':7, 
                   'MaxDelqEver':8, 
                   'NumTotalTrades':36, 
                   'NumTradesOpeninLast12M':1, 
                   'PercentInstallTrades':19, 
                   'MSinceMostRecentInqexcl7days':0, 
                   'NumInqLast6M':0, 
                   'NumInqLast6Mexcl7days':0, 
                   'NetFractionRevolvingBurden':2, 
                   'NetFractionInstallBurden':-8, 
                   'NumRevolvingTradesWBalance':2, 
                   'NumInstallTradesWBalance':1, 
                   'NumBank2NatlTradesWHighUtilization':0, 
                   'PercentTradesWBalance':20}'''

'''
                            This is a sample data for initial page loading
'''




'''

explanation for app route below
'''

@app.route('/', methods=['GET', 'POST'])
def index():
    if request.method == 'POST':
        for cat in sample_data:
            print(str(cat))
            val = request.form.get(str(cat))
            sample_data[cat] = int(val)

    sample = pd.Series(sample_data)
    sample_shaped = sample.values.reshape(1,23)

    prediction, model = predict(sample_shaped)
    explanation = run_lime(sample, model)

    top10 = get_top10(explanation)
    intro, positives, negatives = getDescription(explanation.predict_proba, top10, sample_data)
    # bar_plot_img = plot_to_img('bar', explanation)
    # pie_chart_img = plot_to_img('pie', explanation)
    doughnut_values = list(explanation.predict_proba)
    # bar_names, bar_values = zip(*top10)
    bar_names = []
    pos_bar_values = []
    neg_bar_values = []

    for pair in top10:
        bar_names.append(pair[0])

        if pair[1] > 0:
            # pos_bar_names.append(pair[0])
            pos_bar_values.append(pair[1])
            neg_bar_values.append(0)
        
        else:
            pos_bar_values.append(0)
            neg_bar_values.append(pair[1])

    return render_template('dashboard.html', 
                           val1=sample_data['NumTotalTrades'],
                           val2=sample_data['ExternalRiskEstimate'],
                           val3=sample_data['MSinceOldestTradeOpen'],
                           val4=sample_data['NumInqLast6M'],
                           val5=sample_data['AverageMInFile'],
                           val6=sample_data['MSinceMostRecentTradeOpen'],
                           val7=sample_data['NumTrades60Ever2DerogPubRec'],
                           val8=sample_data['NumTrades90Ever2DerogPubRec'],
                           val9=sample_data['PercentTradesNeverDelq'],
                           val10=sample_data['MSinceMostRecentDelq'],
                           val11=sample_data['MaxDelq2PublicRecLast12M'],
                           val12=sample_data['MaxDelqEver'],
                           val13=sample_data['NumTradesOpeninLast12M'],
                           val14=sample_data['PercentInstallTrades'],
                           val15=sample_data['MSinceMostRecentInqexcl7days'],
                           val16=sample_data['NumInqLast6Mexcl7days'],
                           val17=sample_data['NetFractionRevolvingBurden'],
                           val18=sample_data['NetFractionInstallBurden'],
                           val19=sample_data['NumRevolvingTradesWBalance'],
                           val20=sample_data['NumInstallTradesWBalance'],
                           val21=sample_data['NumBank2NatlTradesWHighUtilization'], 
                           val22=sample_data['PercentTradesWBalance'],
                           val23=sample_data['NumSatisfactoryTrades'],  
                           # bar_plot_url=bar_plot_img, 
                           # pie_chart_url=pie_chart_img,
                           doughnut_values = doughnut_values,
                           bar_names = bar_names,
                           pos_bar_values = pos_bar_values,
                           neg_bar_values = neg_bar_values,
                           intro = intro,
                           positives = positives,
                           negatives = negatives

                           )

if __name__ == '__main__':
    app.run(debug=True,  threaded=False)